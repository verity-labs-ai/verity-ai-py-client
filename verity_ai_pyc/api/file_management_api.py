# coding: utf-8

"""
    AI Labs API Service

    Comprehensive API service for unstructured and structured RAG generation, file management, UI interactions, ground truth generation, and evaluation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool, StrictBytes, StrictInt, StrictStr, field_validator
from typing import Optional, Tuple, Union
from verity_ai_pyc.models.delete_request import DeleteRequest
from verity_ai_pyc.models.delete_response import DeleteResponse
from verity_ai_pyc.models.list_files_response import ListFilesResponse
from verity_ai_pyc.models.upload_file_response import UploadFileResponse

from verity_ai_pyc.api_client import ApiClient, RequestSerialized
from verity_ai_pyc.api_response import ApiResponse
from verity_ai_pyc.rest import RESTResponseType


class FileManagementApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_files_fileman_data_delete_delete(
        self,
        storage_type: StrictStr,
        delete_request: DeleteRequest,
        base_path: Optional[StrictStr] = None,
        sub_path: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteResponse:
        """delete files

        Delete one or more files from S3 using the organization name and tier from the user token.

        :param storage_type: (required)
        :type storage_type: str
        :param delete_request: (required)
        :type delete_request: DeleteRequest
        :param base_path:
        :type base_path: str
        :param sub_path:
        :type sub_path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_files_fileman_data_delete_delete_serialize(
            storage_type=storage_type,
            delete_request=delete_request,
            base_path=base_path,
            sub_path=sub_path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteResponse",
            '401': "ErrorResponse",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_files_fileman_data_delete_delete_with_http_info(
        self,
        storage_type: StrictStr,
        delete_request: DeleteRequest,
        base_path: Optional[StrictStr] = None,
        sub_path: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteResponse]:
        """delete files

        Delete one or more files from S3 using the organization name and tier from the user token.

        :param storage_type: (required)
        :type storage_type: str
        :param delete_request: (required)
        :type delete_request: DeleteRequest
        :param base_path:
        :type base_path: str
        :param sub_path:
        :type sub_path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_files_fileman_data_delete_delete_serialize(
            storage_type=storage_type,
            delete_request=delete_request,
            base_path=base_path,
            sub_path=sub_path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteResponse",
            '401': "ErrorResponse",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_files_fileman_data_delete_delete_without_preload_content(
        self,
        storage_type: StrictStr,
        delete_request: DeleteRequest,
        base_path: Optional[StrictStr] = None,
        sub_path: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete files

        Delete one or more files from S3 using the organization name and tier from the user token.

        :param storage_type: (required)
        :type storage_type: str
        :param delete_request: (required)
        :type delete_request: DeleteRequest
        :param base_path:
        :type base_path: str
        :param sub_path:
        :type sub_path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_files_fileman_data_delete_delete_serialize(
            storage_type=storage_type,
            delete_request=delete_request,
            base_path=base_path,
            sub_path=sub_path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteResponse",
            '401': "ErrorResponse",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_files_fileman_data_delete_delete_serialize(
        self,
        storage_type,
        delete_request,
        base_path,
        sub_path,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if storage_type is not None:
            
            _query_params.append(('storage_type', storage_type))
            
        if base_path is not None:
            
            _query_params.append(('base_path', base_path))
            
        if sub_path is not None:
            
            _query_params.append(('sub_path', sub_path))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if delete_request is not None:
            _body_params = delete_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'XAPIKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/services/fileman/data/delete',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_files_get_fileman_data_list_get(
        self,
        storage_type: StrictStr,
        base_path: Optional[StrictStr] = None,
        sub_path: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        continuation_token: Optional[StrictStr] = None,
        dir_flag: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListFilesResponse:
        """list files (GET method)

        List up to 50 latest files from storage using a GET request.  - storage_type: 'structured' or 'unstructured' to list files from the appropriate storage - base_path: Base directory path (e.g., database name for structured data or knowledge base name for unstructured) - sub_path: Sub-directory path (e.g., table name for structured data) - page: Page number (for compatibility, S3 pagination uses continuation tokens) - page_size: Number of files per page (max 1000) - continuation_token: Token for fetching the next page of results - dir_flag: When True, directories are listed first followed by files (default: False)

        :param storage_type: (required)
        :type storage_type: str
        :param base_path:
        :type base_path: str
        :param sub_path:
        :type sub_path: str
        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param continuation_token:
        :type continuation_token: str
        :param dir_flag:
        :type dir_flag: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_files_get_fileman_data_list_get_serialize(
            storage_type=storage_type,
            base_path=base_path,
            sub_path=sub_path,
            page=page,
            page_size=page_size,
            continuation_token=continuation_token,
            dir_flag=dir_flag,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListFilesResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_files_get_fileman_data_list_get_with_http_info(
        self,
        storage_type: StrictStr,
        base_path: Optional[StrictStr] = None,
        sub_path: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        continuation_token: Optional[StrictStr] = None,
        dir_flag: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListFilesResponse]:
        """list files (GET method)

        List up to 50 latest files from storage using a GET request.  - storage_type: 'structured' or 'unstructured' to list files from the appropriate storage - base_path: Base directory path (e.g., database name for structured data or knowledge base name for unstructured) - sub_path: Sub-directory path (e.g., table name for structured data) - page: Page number (for compatibility, S3 pagination uses continuation tokens) - page_size: Number of files per page (max 1000) - continuation_token: Token for fetching the next page of results - dir_flag: When True, directories are listed first followed by files (default: False)

        :param storage_type: (required)
        :type storage_type: str
        :param base_path:
        :type base_path: str
        :param sub_path:
        :type sub_path: str
        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param continuation_token:
        :type continuation_token: str
        :param dir_flag:
        :type dir_flag: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_files_get_fileman_data_list_get_serialize(
            storage_type=storage_type,
            base_path=base_path,
            sub_path=sub_path,
            page=page,
            page_size=page_size,
            continuation_token=continuation_token,
            dir_flag=dir_flag,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListFilesResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_files_get_fileman_data_list_get_without_preload_content(
        self,
        storage_type: StrictStr,
        base_path: Optional[StrictStr] = None,
        sub_path: Optional[StrictStr] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        continuation_token: Optional[StrictStr] = None,
        dir_flag: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list files (GET method)

        List up to 50 latest files from storage using a GET request.  - storage_type: 'structured' or 'unstructured' to list files from the appropriate storage - base_path: Base directory path (e.g., database name for structured data or knowledge base name for unstructured) - sub_path: Sub-directory path (e.g., table name for structured data) - page: Page number (for compatibility, S3 pagination uses continuation tokens) - page_size: Number of files per page (max 1000) - continuation_token: Token for fetching the next page of results - dir_flag: When True, directories are listed first followed by files (default: False)

        :param storage_type: (required)
        :type storage_type: str
        :param base_path:
        :type base_path: str
        :param sub_path:
        :type sub_path: str
        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param continuation_token:
        :type continuation_token: str
        :param dir_flag:
        :type dir_flag: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_files_get_fileman_data_list_get_serialize(
            storage_type=storage_type,
            base_path=base_path,
            sub_path=sub_path,
            page=page,
            page_size=page_size,
            continuation_token=continuation_token,
            dir_flag=dir_flag,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListFilesResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_files_get_fileman_data_list_get_serialize(
        self,
        storage_type,
        base_path,
        sub_path,
        page,
        page_size,
        continuation_token,
        dir_flag,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if storage_type is not None:
            
            _query_params.append(('storage_type', storage_type))
            
        if base_path is not None:
            
            _query_params.append(('base_path', base_path))
            
        if sub_path is not None:
            
            _query_params.append(('sub_path', sub_path))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if continuation_token is not None:
            
            _query_params.append(('continuation_token', continuation_token))
            
        if dir_flag is not None:
            
            _query_params.append(('dir_flag', dir_flag))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'XAPIKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/services/fileman/data/list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def upload_file_fileman_data_upload_post(
        self,
        file: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        storage_type: StrictStr,
        database_name: Optional[StrictStr] = None,
        table_name: Optional[StrictStr] = None,
        knowledge_base: Optional[StrictStr] = None,
        sub_path: Optional[StrictStr] = None,
        base_path: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UploadFileResponse:
        """upload files

        Upload a file to storage: For structured data, provide database_name and table_name. For unstructured data, provide knowledge_base.

        :param file: (required)
        :type file: bytearray
        :param storage_type: (required)
        :type storage_type: str
        :param database_name:
        :type database_name: str
        :param table_name:
        :type table_name: str
        :param knowledge_base:
        :type knowledge_base: str
        :param sub_path:
        :type sub_path: str
        :param base_path:
        :type base_path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._upload_file_fileman_data_upload_post_serialize(
            file=file,
            storage_type=storage_type,
            database_name=database_name,
            table_name=table_name,
            knowledge_base=knowledge_base,
            sub_path=sub_path,
            base_path=base_path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UploadFileResponse",
            '401': "ErrorResponse",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def upload_file_fileman_data_upload_post_with_http_info(
        self,
        file: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        storage_type: StrictStr,
        database_name: Optional[StrictStr] = None,
        table_name: Optional[StrictStr] = None,
        knowledge_base: Optional[StrictStr] = None,
        sub_path: Optional[StrictStr] = None,
        base_path: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UploadFileResponse]:
        """upload files

        Upload a file to storage: For structured data, provide database_name and table_name. For unstructured data, provide knowledge_base.

        :param file: (required)
        :type file: bytearray
        :param storage_type: (required)
        :type storage_type: str
        :param database_name:
        :type database_name: str
        :param table_name:
        :type table_name: str
        :param knowledge_base:
        :type knowledge_base: str
        :param sub_path:
        :type sub_path: str
        :param base_path:
        :type base_path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._upload_file_fileman_data_upload_post_serialize(
            file=file,
            storage_type=storage_type,
            database_name=database_name,
            table_name=table_name,
            knowledge_base=knowledge_base,
            sub_path=sub_path,
            base_path=base_path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UploadFileResponse",
            '401': "ErrorResponse",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def upload_file_fileman_data_upload_post_without_preload_content(
        self,
        file: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        storage_type: StrictStr,
        database_name: Optional[StrictStr] = None,
        table_name: Optional[StrictStr] = None,
        knowledge_base: Optional[StrictStr] = None,
        sub_path: Optional[StrictStr] = None,
        base_path: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """upload files

        Upload a file to storage: For structured data, provide database_name and table_name. For unstructured data, provide knowledge_base.

        :param file: (required)
        :type file: bytearray
        :param storage_type: (required)
        :type storage_type: str
        :param database_name:
        :type database_name: str
        :param table_name:
        :type table_name: str
        :param knowledge_base:
        :type knowledge_base: str
        :param sub_path:
        :type sub_path: str
        :param base_path:
        :type base_path: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._upload_file_fileman_data_upload_post_serialize(
            file=file,
            storage_type=storage_type,
            database_name=database_name,
            table_name=table_name,
            knowledge_base=knowledge_base,
            sub_path=sub_path,
            base_path=base_path,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UploadFileResponse",
            '401': "ErrorResponse",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _upload_file_fileman_data_upload_post_serialize(
        self,
        file,
        storage_type,
        database_name,
        table_name,
        knowledge_base,
        sub_path,
        base_path,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if file is not None:
            _files['file'] = file
        if storage_type is not None:
            _form_params.append(('storage_type', storage_type))
        if database_name is not None:
            _form_params.append(('database_name', database_name))
        if table_name is not None:
            _form_params.append(('table_name', table_name))
        if knowledge_base is not None:
            _form_params.append(('knowledge_base', knowledge_base))
        if sub_path is not None:
            _form_params.append(('sub_path', sub_path))
        if base_path is not None:
            _form_params.append(('base_path', base_path))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'XAPIKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/services/fileman/data/upload',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


