# coding: utf-8

"""
    AI Labs API Service

    Comprehensive API service for unstructured and structured RAG generation, file management, UI interactions, ground truth generation, and evaluation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from verity_ai_pyc.models.next_token import NextToken
from typing import Optional, Set
from typing_extensions import Self


class ListFilesPagination(BaseModel):
    """
    ListFilesPagination
    """  # noqa: E501

    current_page: StrictInt
    total_pages: StrictInt
    is_truncated: StrictBool
    next_token: Optional[NextToken] = None
    __properties: ClassVar[List[str]] = [
        "current_page",
        "total_pages",
        "is_truncated",
        "next_token",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListFilesPagination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of next_token
        if self.next_token:
            _dict["next_token"] = self.next_token.to_dict()
        # set to None if next_token (nullable) is None
        # and model_fields_set contains the field
        if self.next_token is None and "next_token" in self.model_fields_set:
            _dict["next_token"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListFilesPagination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "current_page": obj.get("current_page"),
                "total_pages": obj.get("total_pages"),
                "is_truncated": obj.get("is_truncated"),
                "next_token": NextToken.from_dict(obj["next_token"])
                if obj.get("next_token") is not None
                else None,
            }
        )
        return _obj
