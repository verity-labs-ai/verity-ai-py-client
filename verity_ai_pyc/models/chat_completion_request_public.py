# coding: utf-8

"""
    AI Labs API Service

    Comprehensive API service for unstructured and structured RAG generation, file management, UI interactions, ground truth generation, and evaluation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (BaseModel, ConfigDict, Field, StrictBool, StrictInt,
                      StrictStr)
from typing_extensions import Self
from verity_ai_pyc.models.knowledge_base import KnowledgeBase
from verity_ai_pyc.models.message import Message


class ChatCompletionRequestPublic(BaseModel):
    """
    ChatCompletionRequestPublic
    """  # noqa: E501

    data_type: Optional[StrictStr] = Field(
        default=None, description="Unstructured or structured data type"
    )
    agent_flag: Optional[StrictBool] = Field(
        default=False, description="Flag to indicate if the request is for an agent"
    )
    agent_id: Optional[StrictStr] = Field(
        default=None, description="ID of the agent to use for processing"
    )
    agent_strategy: Optional[StrictStr] = Field(
        default=None, description="Strategy to use for agent processing"
    )
    agent_history_enabled: Optional[StrictBool] = Field(
        default=False, description="Flag to indicate if the agent history is enabled"
    )
    model: Optional[StrictStr] = Field(default=None, description="Model ID")
    knowledge_base: Optional[KnowledgeBase] = None
    messages: List[Message] = Field(description="List of conversation messages")
    database_name: Optional[StrictStr] = Field(
        default=None,
        description="Name of the database to use for structured processing for the 'structured' strategy, default is 'all'",
    )
    table_name: Optional[StrictStr] = Field(
        default=None,
        description="Name of the table to use for structured processing for the 'structured' strategy, not required to be passed in",
    )
    stream: Optional[StrictBool] = Field(
        default=False, description="Whether to stream responses"
    )
    max_trials: Optional[StrictInt] = Field(
        default=10, description="Maximum number of trials for the agent"
    )
    conversation_id: Optional[StrictStr] = Field(
        default=None,
        description="Conversation ID to enable tracking of the conversation and recall and analytics",
    )
    request_id: Optional[StrictStr] = Field(
        default=None,
        description="Request ID to enable tracking of the request, unique per request",
    )
    __properties: ClassVar[List[str]] = [
        "data_type",
        "agent_flag",
        "agent_id",
        "agent_strategy",
        "agent_history_enabled",
        "model",
        "knowledge_base",
        "messages",
        "database_name",
        "table_name",
        "stream",
        "max_trials",
        "conversation_id",
        "request_id",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatCompletionRequestPublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of knowledge_base
        if self.knowledge_base:
            _dict["knowledge_base"] = self.knowledge_base.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict["messages"] = _items
        # set to None if knowledge_base (nullable) is None
        # and model_fields_set contains the field
        if self.knowledge_base is None and "knowledge_base" in self.model_fields_set:
            _dict["knowledge_base"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatCompletionRequestPublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "data_type": obj.get("data_type"),
                "agent_flag": obj.get("agent_flag")
                if obj.get("agent_flag") is not None
                else False,
                "agent_id": obj.get("agent_id"),
                "agent_strategy": obj.get("agent_strategy"),
                "agent_history_enabled": obj.get("agent_history_enabled")
                if obj.get("agent_history_enabled") is not None
                else False,
                "model": obj.get("model"),
                "knowledge_base": KnowledgeBase.from_dict(obj["knowledge_base"])
                if obj.get("knowledge_base") is not None
                else None,
                "messages": [Message.from_dict(_item) for _item in obj["messages"]]
                if obj.get("messages") is not None
                else None,
                "database_name": obj.get("database_name"),
                "table_name": obj.get("table_name"),
                "stream": obj.get("stream") if obj.get("stream") is not None else False,
                "max_trials": obj.get("max_trials")
                if obj.get("max_trials") is not None
                else 10,
                "conversation_id": obj.get("conversation_id"),
                "request_id": obj.get("request_id"),
            }
        )
        return _obj
