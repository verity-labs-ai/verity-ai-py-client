# coding: utf-8

"""
    AI Labs API Service

    Comprehensive API service for unstructured and structured RAG generation, file management, UI interactions, ground truth generation, and evaluation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from verity_ai_pyc.models.message import Message
from typing import Optional, Set
from typing_extensions import Self


class ChatCompletionRequestPublic(BaseModel):
    """
    ChatCompletionRequestPublic
    """  # noqa: E501

    data_type: Optional[StrictStr] = Field(
        default=None, description="Unstructured or structured data type"
    )
    agent_flag: Optional[StrictBool] = None
    agent_name: Optional[StrictStr] = None
    agent_strategy: Optional[StrictStr] = None
    agent_history_enabled: Optional[StrictBool] = None
    model: Optional[StrictStr] = Field(default=None, description="Model ID")
    knowledge_base: Optional[StrictStr] = None
    messages: List[Message] = Field(description="List of conversation messages")
    database_name: Optional[StrictStr] = None
    table_name: Optional[StrictStr] = None
    stream: Optional[StrictBool] = None
    max_trials: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = [
        "data_type",
        "agent_flag",
        "agent_name",
        "agent_strategy",
        "agent_history_enabled",
        "model",
        "knowledge_base",
        "messages",
        "database_name",
        "table_name",
        "stream",
        "max_trials",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatCompletionRequestPublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict["messages"] = _items
        # set to None if agent_flag (nullable) is None
        # and model_fields_set contains the field
        if self.agent_flag is None and "agent_flag" in self.model_fields_set:
            _dict["agent_flag"] = None

        # set to None if agent_name (nullable) is None
        # and model_fields_set contains the field
        if self.agent_name is None and "agent_name" in self.model_fields_set:
            _dict["agent_name"] = None

        # set to None if agent_strategy (nullable) is None
        # and model_fields_set contains the field
        if self.agent_strategy is None and "agent_strategy" in self.model_fields_set:
            _dict["agent_strategy"] = None

        # set to None if agent_history_enabled (nullable) is None
        # and model_fields_set contains the field
        if (
            self.agent_history_enabled is None
            and "agent_history_enabled" in self.model_fields_set
        ):
            _dict["agent_history_enabled"] = None

        # set to None if knowledge_base (nullable) is None
        # and model_fields_set contains the field
        if self.knowledge_base is None and "knowledge_base" in self.model_fields_set:
            _dict["knowledge_base"] = None

        # set to None if database_name (nullable) is None
        # and model_fields_set contains the field
        if self.database_name is None and "database_name" in self.model_fields_set:
            _dict["database_name"] = None

        # set to None if table_name (nullable) is None
        # and model_fields_set contains the field
        if self.table_name is None and "table_name" in self.model_fields_set:
            _dict["table_name"] = None

        # set to None if stream (nullable) is None
        # and model_fields_set contains the field
        if self.stream is None and "stream" in self.model_fields_set:
            _dict["stream"] = None

        # set to None if max_trials (nullable) is None
        # and model_fields_set contains the field
        if self.max_trials is None and "max_trials" in self.model_fields_set:
            _dict["max_trials"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatCompletionRequestPublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "data_type": obj.get("data_type"),
                "agent_flag": obj.get("agent_flag"),
                "agent_name": obj.get("agent_name"),
                "agent_strategy": obj.get("agent_strategy"),
                "agent_history_enabled": obj.get("agent_history_enabled"),
                "model": obj.get("model"),
                "knowledge_base": obj.get("knowledge_base"),
                "messages": [Message.from_dict(_item) for _item in obj["messages"]]
                if obj.get("messages") is not None
                else None,
                "database_name": obj.get("database_name"),
                "table_name": obj.get("table_name"),
                "stream": obj.get("stream"),
                "max_trials": obj.get("max_trials"),
            }
        )
        return _obj
