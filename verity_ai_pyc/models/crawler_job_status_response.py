# coding: utf-8

"""
    AI Labs API Service

    Comprehensive API service for unstructured and structured RAG generation, file management, UI interactions, ground truth generation, and evaluation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (BaseModel, ConfigDict, StrictInt, StrictStr,
                      field_validator)
from typing_extensions import Self


class CrawlerJobStatusResponse(BaseModel):
    """
    CrawlerJobStatusResponse
    """  # noqa: E501

    job_id: StrictStr
    status: StrictStr
    progress: StrictInt
    error: StrictStr
    result_url: StrictStr
    organisation: StrictStr
    user_id: StrictStr
    submitted_at: StrictStr
    updated_at: StrictStr
    __properties: ClassVar[List[str]] = [
        "job_id",
        "status",
        "progress",
        "error",
        "result_url",
        "organisation",
        "user_id",
        "submitted_at",
        "updated_at",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["pending", "running", "completed", "failed"]):
            raise ValueError(
                "must be one of enum values ('pending', 'running', 'completed', 'failed')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CrawlerJobStatusResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CrawlerJobStatusResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "job_id": obj.get("job_id"),
                "status": obj.get("status"),
                "progress": obj.get("progress"),
                "error": obj.get("error"),
                "result_url": obj.get("result_url"),
                "organisation": obj.get("organisation"),
                "user_id": obj.get("user_id"),
                "submitted_at": obj.get("submitted_at"),
                "updated_at": obj.get("updated_at"),
            }
        )
        return _obj
