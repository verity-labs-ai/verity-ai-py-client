# coding: utf-8

"""
    AI Labs API Service

    Comprehensive API service for unstructured and structured RAG generation, file management, UI interactions, ground truth generation, and evaluation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Annotated, Self


class AgentResponse(BaseModel):
    """
    Model for agent API responses
    """  # noqa: E501

    agent_id: StrictStr
    name: StrictStr
    description: StrictStr
    model: StrictStr
    system_prompt: StrictStr
    custom_prompt: StrictStr
    allowed_tools: List[StrictStr]
    use_mcp: StrictBool
    mcp_server_urls: List[StrictStr]
    agent_strategy: StrictStr
    stream: StrictBool
    active: StrictBool
    version: Optional[StrictStr] = None
    organisation: StrictStr
    agent_origin: StrictStr = Field(description="Origin type: 'preset' or 'custom'")
    parent_agent_id: Optional[StrictStr] = Field(
        default=None,
        description="ID of the parent preset agent if this is a custom agent derived from a preset",
    )
    knowledge_base: Optional[StrictStr] = Field(
        default=None,
        description="Knowledge base the agent uses for unstructured data retrieval",
    )
    database_name: Optional[StrictStr] = Field(
        default=None,
        description="Database name the agent uses for structured data queries",
    )
    table_name: Optional[StrictStr] = Field(
        default=None,
        description="Table name the agent uses for structured data queries",
    )
    max_trials: Optional[Annotated[int, Field(le=10, strict=True, ge=1)]] = Field(
        default=None, description="Maximum number of tool execution cycles"
    )
    created_at: datetime
    updated_at: datetime
    __properties: ClassVar[List[str]] = [
        "agent_id",
        "name",
        "description",
        "model",
        "system_prompt",
        "custom_prompt",
        "allowed_tools",
        "use_mcp",
        "mcp_server_urls",
        "agent_strategy",
        "stream",
        "active",
        "version",
        "organisation",
        "agent_origin",
        "parent_agent_id",
        "knowledge_base",
        "database_name",
        "table_name",
        "max_trials",
        "created_at",
        "updated_at",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "agent_id": obj.get("agent_id"),
                "name": obj.get("name"),
                "description": obj.get("description"),
                "model": obj.get("model"),
                "system_prompt": obj.get("system_prompt"),
                "custom_prompt": obj.get("custom_prompt"),
                "allowed_tools": obj.get("allowed_tools"),
                "use_mcp": obj.get("use_mcp"),
                "mcp_server_urls": obj.get("mcp_server_urls"),
                "agent_strategy": obj.get("agent_strategy"),
                "stream": obj.get("stream"),
                "active": obj.get("active"),
                "version": obj.get("version"),
                "organisation": obj.get("organisation"),
                "agent_origin": obj.get("agent_origin"),
                "parent_agent_id": obj.get("parent_agent_id"),
                "knowledge_base": obj.get("knowledge_base"),
                "database_name": obj.get("database_name"),
                "table_name": obj.get("table_name"),
                "max_trials": obj.get("max_trials"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
            }
        )
        return _obj
