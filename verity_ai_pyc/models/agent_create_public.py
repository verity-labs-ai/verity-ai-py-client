# coding: utf-8

"""
    AI Labs API Service

    Comprehensive API service for unstructured and structured RAG generation, file management, UI interactions, ground truth generation, and evaluation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Annotated, Self


class AgentCreatePublic(BaseModel):
    """
    Public model for creating a new agent
    """  # noqa: E501

    name: StrictStr = Field(description="Name of the agent")
    description: Optional[StrictStr] = Field(
        default=None, description="Description of the agent's purpose and capabilities"
    )
    model: Optional[StrictStr] = Field(
        default="anthropic_claude_3_5_sonnet_v1",
        description="LLM model identifier (e.g., 'anthropic_claude_3_5_sonnet_v1')",
    )
    system_prompt: Optional[StrictStr] = Field(
        default=None,
        description="System prompt that defines the agent's behavior and context",
    )
    custom_prompt: Optional[StrictStr] = Field(
        default=None,
        description="Custom prompt that can be used to add additional instructions to the agent",
    )
    knowledge_base: Optional[StrictStr] = Field(
        default=None,
        description="Knowledge base the agent should use for unstructured data retrieval",
    )
    database_name: Optional[StrictStr] = Field(
        default=None,
        description="Database name the agent should use for structured data queries",
    )
    table_name: Optional[StrictStr] = Field(
        default=None,
        description="Table name the agent should use for structured data queries",
    )
    allowed_tools: Optional[List[StrictStr]] = Field(
        default=None, description="List of tool names the agent is allowed to use"
    )
    use_mcp: Optional[StrictBool] = Field(
        default=False,
        description="Whether to enable MCP (Model Context Protocol) integration",
    )
    mcp_server_urls: Optional[List[StrictStr]] = Field(
        default=None, description="List of MCP server URLs"
    )
    agent_strategy: Optional[StrictStr] = Field(
        default="react", description="Reasoning strategy ('react', 'cot', etc.)"
    )
    stream: Optional[StrictBool] = Field(
        default=False, description="Whether to enable streaming responses by default"
    )
    active: Optional[StrictBool] = Field(
        default=True, description="Whether the agent is active and available for use"
    )
    agent_origin: Optional[StrictStr] = Field(
        default="custom", description="Origin type: 'preset' or 'custom'"
    )
    parent_agent_id: Optional[StrictStr] = Field(
        default=None,
        description="ID of the parent preset agent if this is a custom agent derived from a preset",
    )
    max_trials: Optional[Annotated[int, Field(le=10, strict=True, ge=1)]] = Field(
        default=None, description="Maximum number of tool execution cycles"
    )
    __properties: ClassVar[List[str]] = [
        "name",
        "description",
        "model",
        "system_prompt",
        "custom_prompt",
        "knowledge_base",
        "database_name",
        "table_name",
        "allowed_tools",
        "use_mcp",
        "mcp_server_urls",
        "agent_strategy",
        "stream",
        "active",
        "agent_origin",
        "parent_agent_id",
        "max_trials",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentCreatePublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentCreatePublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "description": obj.get("description"),
                "model": obj.get("model")
                if obj.get("model") is not None
                else "anthropic_claude_3_5_sonnet_v1",
                "system_prompt": obj.get("system_prompt"),
                "custom_prompt": obj.get("custom_prompt"),
                "knowledge_base": obj.get("knowledge_base"),
                "database_name": obj.get("database_name"),
                "table_name": obj.get("table_name"),
                "allowed_tools": obj.get("allowed_tools"),
                "use_mcp": obj.get("use_mcp")
                if obj.get("use_mcp") is not None
                else False,
                "mcp_server_urls": obj.get("mcp_server_urls"),
                "agent_strategy": obj.get("agent_strategy")
                if obj.get("agent_strategy") is not None
                else "react",
                "stream": obj.get("stream") if obj.get("stream") is not None else False,
                "active": obj.get("active") if obj.get("active") is not None else True,
                "agent_origin": obj.get("agent_origin")
                if obj.get("agent_origin") is not None
                else "custom",
                "parent_agent_id": obj.get("parent_agent_id"),
                "max_trials": obj.get("max_trials"),
            }
        )
        return _obj
