# coding: utf-8

"""
    AI Labs API Service

    Comprehensive API service for unstructured and structured RAG generation, file management, UI interactions, ground truth generation, and evaluation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AgentCreatePublic(BaseModel):
    """
    Public model for creating a new agent
    """ # noqa: E501
    name: StrictStr = Field(description="Name of the agent")
    description: Optional[StrictStr] = None
    model: Optional[StrictStr] = Field(default='anthropic_claude_3_5_sonnet_v1', description="LLM model identifier (e.g., 'anthropic_claude_3_5_sonnet_v1')")
    custom_prompt: Optional[StrictStr] = None
    allowed_tools: Optional[List[Optional[StrictStr]]] = Field(default=None, description="List of tool names the agent is allowed to use")
    use_mcp: Optional[StrictBool] = Field(default=False, description="Whether to enable MCP (Model Context Protocol) integration")
    mcp_server_urls: Optional[List[Optional[StrictStr]]] = Field(default=None, description="List of MCP server URLs")
    agent_strategy: Optional[StrictStr] = Field(default='react', description="Reasoning strategy ('react', 'cot', etc.)")
    stream: Optional[StrictBool] = Field(default=False, description="Whether to enable streaming responses by default")
    active: Optional[StrictBool] = Field(default=True, description="Whether the agent is active and available for use")
    __properties: ClassVar[List[str]] = ["name", "description", "model", "custom_prompt", "allowed_tools", "use_mcp", "mcp_server_urls", "agent_strategy", "stream", "active"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentCreatePublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if custom_prompt (nullable) is None
        # and model_fields_set contains the field
        if self.custom_prompt is None and "custom_prompt" in self.model_fields_set:
            _dict['custom_prompt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentCreatePublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "model": obj.get("model") if obj.get("model") is not None else 'anthropic_claude_3_5_sonnet_v1',
            "custom_prompt": obj.get("custom_prompt"),
            "allowed_tools": obj.get("allowed_tools"),
            "use_mcp": obj.get("use_mcp") if obj.get("use_mcp") is not None else False,
            "mcp_server_urls": obj.get("mcp_server_urls"),
            "agent_strategy": obj.get("agent_strategy") if obj.get("agent_strategy") is not None else 'react',
            "stream": obj.get("stream") if obj.get("stream") is not None else False,
            "active": obj.get("active") if obj.get("active") is not None else True
        })
        return _obj


