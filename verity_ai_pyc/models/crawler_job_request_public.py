# coding: utf-8

"""
    AI Labs API Service

    Comprehensive API service for unstructured and structured RAG generation, file management, UI interactions, ground truth generation, and evaluation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (BaseModel, ConfigDict, Field, StrictBool, StrictStr,
                      field_validator)
from typing_extensions import Annotated, Self


class CrawlerJobRequestPublic(BaseModel):
    """
    Public model for creating a crawler job
    """  # noqa: E501

    domain: Optional[StrictStr] = Field(
        default=None, description="Root domain for crawling."
    )
    urls: Optional[
        List[Annotated[str, Field(min_length=1, strict=True, max_length=2083)]]
    ] = Field(default=None, description="List of URLs to crawl.")
    include_types: List[StrictStr] = Field(description="Content types to include.")
    url_paths: Optional[List[StrictStr]] = Field(
        default=None, description="Specific URL paths to crawl."
    )
    js_flag: Optional[StrictBool] = Field(
        default=False, description="Enable JavaScript rendering for SPA sites."
    )
    __properties: ClassVar[List[str]] = [
        "domain",
        "urls",
        "include_types",
        "url_paths",
        "js_flag",
    ]

    @field_validator("include_types")
    def include_types_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(["text", "images", "pdf"]):
                raise ValueError(
                    "each list item must be one of ('text', 'images', 'pdf')"
                )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CrawlerJobRequestPublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CrawlerJobRequestPublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "domain": obj.get("domain"),
                "urls": obj.get("urls"),
                "include_types": obj.get("include_types"),
                "url_paths": obj.get("url_paths"),
                "js_flag": obj.get("js_flag")
                if obj.get("js_flag") is not None
                else False,
            }
        )
        return _obj
