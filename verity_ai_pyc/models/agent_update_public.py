# coding: utf-8

"""
    AI Labs API Service

    Comprehensive API service for unstructured and structured RAG generation, file management, UI interactions, ground truth generation, and evaluation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class AgentUpdatePublic(BaseModel):
    """
    Public model for updating an existing agent - all fields optional
    """  # noqa: E501

    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    model: Optional[StrictStr] = None
    custom_prompt: Optional[StrictStr] = None
    allowed_tools: Optional[List[Optional[StrictStr]]] = None
    use_mcp: Optional[StrictBool] = None
    mcp_server_urls: Optional[List[StrictStr]] = None
    agent_strategy: Optional[StrictStr] = None
    stream: Optional[StrictBool] = None
    active: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = [
        "name",
        "description",
        "model",
        "custom_prompt",
        "allowed_tools",
        "use_mcp",
        "mcp_server_urls",
        "agent_strategy",
        "stream",
        "active",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentUpdatePublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict["name"] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict["model"] = None

        # set to None if custom_prompt (nullable) is None
        # and model_fields_set contains the field
        if self.custom_prompt is None and "custom_prompt" in self.model_fields_set:
            _dict["custom_prompt"] = None

        # set to None if allowed_tools (nullable) is None
        # and model_fields_set contains the field
        if self.allowed_tools is None and "allowed_tools" in self.model_fields_set:
            _dict["allowed_tools"] = None

        # set to None if use_mcp (nullable) is None
        # and model_fields_set contains the field
        if self.use_mcp is None and "use_mcp" in self.model_fields_set:
            _dict["use_mcp"] = None

        # set to None if mcp_server_urls (nullable) is None
        # and model_fields_set contains the field
        if self.mcp_server_urls is None and "mcp_server_urls" in self.model_fields_set:
            _dict["mcp_server_urls"] = None

        # set to None if agent_strategy (nullable) is None
        # and model_fields_set contains the field
        if self.agent_strategy is None and "agent_strategy" in self.model_fields_set:
            _dict["agent_strategy"] = None

        # set to None if stream (nullable) is None
        # and model_fields_set contains the field
        if self.stream is None and "stream" in self.model_fields_set:
            _dict["stream"] = None

        # set to None if active (nullable) is None
        # and model_fields_set contains the field
        if self.active is None and "active" in self.model_fields_set:
            _dict["active"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentUpdatePublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "description": obj.get("description"),
                "model": obj.get("model"),
                "custom_prompt": obj.get("custom_prompt"),
                "allowed_tools": obj.get("allowed_tools"),
                "use_mcp": obj.get("use_mcp"),
                "mcp_server_urls": obj.get("mcp_server_urls"),
                "agent_strategy": obj.get("agent_strategy"),
                "stream": obj.get("stream"),
                "active": obj.get("active"),
            }
        )
        return _obj
