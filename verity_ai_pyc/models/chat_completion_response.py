# coding: utf-8

"""
    AI Labs API Service

    Comprehensive API service for unstructured and structured RAG generation, file management, UI interactions, ground truth generation, and evaluation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from verity_ai_pyc.models.chat_completion_message import ChatCompletionMessage
from verity_ai_pyc.models.usage import Usage
from typing import Optional, Set
from typing_extensions import Self

class ChatCompletionResponse(BaseModel):
    """
    ChatCompletionResponse
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier for the response")
    created: StrictInt = Field(description="Timestamp (Unix epoch) when the response was created")
    model: StrictStr = Field(description="The model used to generate the response")
    messages: List[ChatCompletionMessage] = Field(description="A list of messages containing the model's response")
    structured_data: List[Dict[str, Any]] = Field(description="Raw structured output from the query")
    sources: Optional[List[StrictStr]] = Field(default=None, description="List of document sources utilized for the response")
    usage: Usage = Field(description="Usage statistics for the response")
    metadata: Optional[Dict[str, Any]] = None
    llm_sql_generation: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "created", "model", "messages", "structured_data", "sources", "usage", "metadata", "llm_sql_generation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatCompletionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if llm_sql_generation (nullable) is None
        # and model_fields_set contains the field
        if self.llm_sql_generation is None and "llm_sql_generation" in self.model_fields_set:
            _dict['llm_sql_generation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatCompletionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created": obj.get("created"),
            "model": obj.get("model"),
            "messages": [ChatCompletionMessage.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "structured_data": obj.get("structured_data"),
            "sources": obj.get("sources"),
            "usage": Usage.from_dict(obj["usage"]) if obj.get("usage") is not None else None,
            "metadata": obj.get("metadata"),
            "llm_sql_generation": obj.get("llm_sql_generation")
        })
        return _obj


