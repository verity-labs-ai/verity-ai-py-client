# coding: utf-8

"""
    AI Labs API Service

    Comprehensive API service for unstructured and structured RAG generation, file management, UI interactions, ground truth generation, and evaluation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from verity_ai_pyc.models.agent_response import AgentResponse

class TestAgentResponse(unittest.TestCase):
    """AgentResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AgentResponse:
        """Test AgentResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AgentResponse`
        """
        model = AgentResponse()
        if include_optional:
            return AgentResponse(
                agent_id = '',
                name = '',
                description = '',
                model = '',
                system_prompt = '',
                custom_prompt = '',
                allowed_tools = [
                    ''
                    ],
                use_mcp = True,
                mcp_server_urls = [
                    ''
                    ],
                agent_strategy = '',
                stream = True,
                active = True,
                version = '',
                organisation = '',
                agent_origin = '',
                parent_agent_id = '',
                knowledge_base = '',
                database_name = '',
                table_name = '',
                max_trials = 1.0,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return AgentResponse(
                agent_id = '',
                name = '',
                description = '',
                model = '',
                system_prompt = '',
                custom_prompt = '',
                allowed_tools = [
                    ''
                    ],
                use_mcp = True,
                mcp_server_urls = [
                    ''
                    ],
                agent_strategy = '',
                stream = True,
                active = True,
                organisation = '',
                agent_origin = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testAgentResponse(self):
        """Test AgentResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
